// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bridgeConn.proto

package gwconn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BridgeConn_BLogin_FullMethodName     = "/gwconn.BridgeConn/BLogin"
	BridgeConn_BRegister_FullMethodName  = "/gwconn.BridgeConn/BRegister"
	BridgeConn_BVpn_FullMethodName       = "/gwconn.BridgeConn/BVpn"
	BridgeConn_BAcmeChall_FullMethodName = "/gwconn.BridgeConn/BAcmeChall"
)

// BridgeConnClient is the client API for BridgeConn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeConnClient interface {
	BLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	BRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	BVpn(ctx context.Context, in *VpnReq, opts ...grpc.CallOption) (*VpnCfg, error)
	BAcmeChall(ctx context.Context, in *AcmeChallReq, opts ...grpc.CallOption) (*GeneralResp, error)
}

type bridgeConnClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeConnClient(cc grpc.ClientConnInterface) BridgeConnClient {
	return &bridgeConnClient{cc}
}

func (c *bridgeConnClient) BLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, BridgeConn_BLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeConnClient) BRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, BridgeConn_BRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeConnClient) BVpn(ctx context.Context, in *VpnReq, opts ...grpc.CallOption) (*VpnCfg, error) {
	out := new(VpnCfg)
	err := c.cc.Invoke(ctx, BridgeConn_BVpn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeConnClient) BAcmeChall(ctx context.Context, in *AcmeChallReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, BridgeConn_BAcmeChall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeConnServer is the server API for BridgeConn service.
// All implementations must embed UnimplementedBridgeConnServer
// for forward compatibility
type BridgeConnServer interface {
	BLogin(context.Context, *LoginReq) (*LoginResp, error)
	BRegister(context.Context, *RegisterReq) (*RegisterResp, error)
	BVpn(context.Context, *VpnReq) (*VpnCfg, error)
	BAcmeChall(context.Context, *AcmeChallReq) (*GeneralResp, error)
	mustEmbedUnimplementedBridgeConnServer()
}

// UnimplementedBridgeConnServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeConnServer struct {
}

func (UnimplementedBridgeConnServer) BLogin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BLogin not implemented")
}
func (UnimplementedBridgeConnServer) BRegister(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRegister not implemented")
}
func (UnimplementedBridgeConnServer) BVpn(context.Context, *VpnReq) (*VpnCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BVpn not implemented")
}
func (UnimplementedBridgeConnServer) BAcmeChall(context.Context, *AcmeChallReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BAcmeChall not implemented")
}
func (UnimplementedBridgeConnServer) mustEmbedUnimplementedBridgeConnServer() {}

// UnsafeBridgeConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeConnServer will
// result in compilation errors.
type UnsafeBridgeConnServer interface {
	mustEmbedUnimplementedBridgeConnServer()
}

func RegisterBridgeConnServer(s grpc.ServiceRegistrar, srv BridgeConnServer) {
	s.RegisterService(&BridgeConn_ServiceDesc, srv)
}

func _BridgeConn_BLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeConnServer).BLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeConn_BLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeConnServer).BLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeConn_BRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeConnServer).BRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeConn_BRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeConnServer).BRegister(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeConn_BVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeConnServer).BVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeConn_BVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeConnServer).BVpn(ctx, req.(*VpnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeConn_BAcmeChall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcmeChallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeConnServer).BAcmeChall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeConn_BAcmeChall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeConnServer).BAcmeChall(ctx, req.(*AcmeChallReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgeConn_ServiceDesc is the grpc.ServiceDesc for BridgeConn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeConn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gwconn.BridgeConn",
	HandlerType: (*BridgeConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BLogin",
			Handler:    _BridgeConn_BLogin_Handler,
		},
		{
			MethodName: "BRegister",
			Handler:    _BridgeConn_BRegister_Handler,
		},
		{
			MethodName: "BVpn",
			Handler:    _BridgeConn_BVpn_Handler,
		},
		{
			MethodName: "BAcmeChall",
			Handler:    _BridgeConn_BAcmeChall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridgeConn.proto",
}
