syntax = "proto3";

option go_package = "github.com/tyfura/gwconn";
option java_multiple_files = true;
option java_package = "io.tyft.gwconn";
option java_outer_classname = "";

import "common.proto";
package gwconn;

// Interface exported by the server.
service GW {
  rpc Login(LoginReq) returns (LoginResp) {}

  // bridges
  rpc BridgeListNew(ListReq) returns (ListResponse) {} 
  rpc BridgeAck(BridgeAckReq) returns (GeneralResp) {}
  rpc BridgeList(ListReq) returns (ListResponse) {}
  rpc BridgeLogs(ListReq) returns (ListResponse) {}
  rpc BridgeRouteInfo(ListReq) returns (ListResponse) {}
  rpc BridgeSystemStat(ListReq) returns (ListResponse) {}
  rpc BridgeStreamLogs(JoinStreamReq) returns (stream LogMsg) {}

  // targets
  rpc TargetAdd(Target) returns (GeneralResp) {}
  rpc TargetChange(Target) returns (GeneralResp) {}
  rpc TargetDel(DelReq) returns (GeneralResp) {}
  rpc TargetList(ListReq) returns (ListResponse) {}


  // users
  rpc UserAdd(User) returns (GeneralResp) {}
  rpc UserChange(User) returns (GeneralResp) {}
  rpc UserDel(DelReq) returns (GeneralResp) {}
  rpc UserList(ListReq) returns (ListResponse) {}

  // IP policies
  rpc PolicyAdd(Policy) returns (GeneralResp) {}
  rpc PolicyChange(Policy) returns (GeneralResp) {}
  rpc PolicyDel(DelReq) returns (GeneralResp) {}
  rpc PolicyList(ListReq) returns (ListResponse) {}
}

message JoinStreamReq {}

//message PolicyManageReq {
//    Action act = 1;
//    Policy policy = 2;
//}

//message UserManageReq {
//    Action act = 1;
//    User user = 2;
//}

message User {
  string uname = 1;
  string pass = 2;
  string role = 3;
}

message ListResponse {
  uint32 total = 1;
  uint32 page = 2;
  uint32 perPage = 3; 
  oneof list {
    Users users = 4;
    Bridges bridges = 5;
    Logs logs = 6;
    BridgeStats bridgeStats = 7;
    Policies policies = 8;
    Targets targets = 9;
  }
}

message Users {
  repeated User users = 1;
}

message Policies {
  repeated Policy policies = 1;
}

message Targets {
  repeated Target targets = 1;
}


enum BridgeAckT {
  Deny = 0;
  Acknowledge = 1;
}

message BridgeAckReq {
  string id = 1;
  string newName = 2;
  BridgeAckT bridgeAck = 3;
}


enum PolicyType {
  PublicAccess = 0;
  AllowList = 1;
  BlockList = 2;
}

message Policy {
  string name = 1;
  PolicyType type = 2;
  repeated string ips = 3;
}

message DelReq {
  string name = 1;
}