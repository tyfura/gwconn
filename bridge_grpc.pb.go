// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bridge.proto

package gwconn

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BridgeApi_Register_FullMethodName        = "/gwconn.BridgeApi/Register"
	BridgeApi_GetTargetStream_FullMethodName = "/gwconn.BridgeApi/GetTargetStream"
	BridgeApi_CallDnsAcme_FullMethodName     = "/gwconn.BridgeApi/CallDnsAcme"
	BridgeApi_SendSystemStat_FullMethodName  = "/gwconn.BridgeApi/SendSystemStat"
	BridgeApi_SendRouteInfo_FullMethodName   = "/gwconn.BridgeApi/SendRouteInfo"
	BridgeApi_SendLog_FullMethodName         = "/gwconn.BridgeApi/SendLog"
)

// BridgeApiClient is the client API for BridgeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeApiClient interface {
	Register(ctx context.Context, in *BridgeInfo, opts ...grpc.CallOption) (*RegisterResp, error)
	GetTargetStream(ctx context.Context, in *JoinStreamReq, opts ...grpc.CallOption) (BridgeApi_GetTargetStreamClient, error)
	CallDnsAcme(ctx context.Context, in *DnsAcmeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SendSystemStat(ctx context.Context, in *SystemStat, opts ...grpc.CallOption) (*empty.Empty, error)
	SendRouteInfo(ctx context.Context, in *RouteStat, opts ...grpc.CallOption) (*empty.Empty, error)
	SendLog(ctx context.Context, in *LogLineMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type bridgeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeApiClient(cc grpc.ClientConnInterface) BridgeApiClient {
	return &bridgeApiClient{cc}
}

func (c *bridgeApiClient) Register(ctx context.Context, in *BridgeInfo, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, BridgeApi_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeApiClient) GetTargetStream(ctx context.Context, in *JoinStreamReq, opts ...grpc.CallOption) (BridgeApi_GetTargetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BridgeApi_ServiceDesc.Streams[0], BridgeApi_GetTargetStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeApiGetTargetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BridgeApi_GetTargetStreamClient interface {
	Recv() (*BridgeTarget, error)
	grpc.ClientStream
}

type bridgeApiGetTargetStreamClient struct {
	grpc.ClientStream
}

func (x *bridgeApiGetTargetStreamClient) Recv() (*BridgeTarget, error) {
	m := new(BridgeTarget)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeApiClient) CallDnsAcme(ctx context.Context, in *DnsAcmeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BridgeApi_CallDnsAcme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeApiClient) SendSystemStat(ctx context.Context, in *SystemStat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BridgeApi_SendSystemStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeApiClient) SendRouteInfo(ctx context.Context, in *RouteStat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BridgeApi_SendRouteInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeApiClient) SendLog(ctx context.Context, in *LogLineMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BridgeApi_SendLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeApiServer is the server API for BridgeApi service.
// All implementations must embed UnimplementedBridgeApiServer
// for forward compatibility
type BridgeApiServer interface {
	Register(context.Context, *BridgeInfo) (*RegisterResp, error)
	GetTargetStream(*JoinStreamReq, BridgeApi_GetTargetStreamServer) error
	CallDnsAcme(context.Context, *DnsAcmeReq) (*empty.Empty, error)
	SendSystemStat(context.Context, *SystemStat) (*empty.Empty, error)
	SendRouteInfo(context.Context, *RouteStat) (*empty.Empty, error)
	SendLog(context.Context, *LogLineMsg) (*empty.Empty, error)
	mustEmbedUnimplementedBridgeApiServer()
}

// UnimplementedBridgeApiServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeApiServer struct {
}

func (UnimplementedBridgeApiServer) Register(context.Context, *BridgeInfo) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBridgeApiServer) GetTargetStream(*JoinStreamReq, BridgeApi_GetTargetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTargetStream not implemented")
}
func (UnimplementedBridgeApiServer) CallDnsAcme(context.Context, *DnsAcmeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallDnsAcme not implemented")
}
func (UnimplementedBridgeApiServer) SendSystemStat(context.Context, *SystemStat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystemStat not implemented")
}
func (UnimplementedBridgeApiServer) SendRouteInfo(context.Context, *RouteStat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRouteInfo not implemented")
}
func (UnimplementedBridgeApiServer) SendLog(context.Context, *LogLineMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}
func (UnimplementedBridgeApiServer) mustEmbedUnimplementedBridgeApiServer() {}

// UnsafeBridgeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeApiServer will
// result in compilation errors.
type UnsafeBridgeApiServer interface {
	mustEmbedUnimplementedBridgeApiServer()
}

func RegisterBridgeApiServer(s grpc.ServiceRegistrar, srv BridgeApiServer) {
	s.RegisterService(&BridgeApi_ServiceDesc, srv)
}

func _BridgeApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeApi_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeApiServer).Register(ctx, req.(*BridgeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeApi_GetTargetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeApiServer).GetTargetStream(m, &bridgeApiGetTargetStreamServer{stream})
}

type BridgeApi_GetTargetStreamServer interface {
	Send(*BridgeTarget) error
	grpc.ServerStream
}

type bridgeApiGetTargetStreamServer struct {
	grpc.ServerStream
}

func (x *bridgeApiGetTargetStreamServer) Send(m *BridgeTarget) error {
	return x.ServerStream.SendMsg(m)
}

func _BridgeApi_CallDnsAcme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnsAcmeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeApiServer).CallDnsAcme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeApi_CallDnsAcme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeApiServer).CallDnsAcme(ctx, req.(*DnsAcmeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeApi_SendSystemStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeApiServer).SendSystemStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeApi_SendSystemStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeApiServer).SendSystemStat(ctx, req.(*SystemStat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeApi_SendRouteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteStat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeApiServer).SendRouteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeApi_SendRouteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeApiServer).SendRouteInfo(ctx, req.(*RouteStat))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeApi_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLineMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeApiServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeApi_SendLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeApiServer).SendLog(ctx, req.(*LogLineMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgeApi_ServiceDesc is the grpc.ServiceDesc for BridgeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gwconn.BridgeApi",
	HandlerType: (*BridgeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BridgeApi_Register_Handler,
		},
		{
			MethodName: "CallDnsAcme",
			Handler:    _BridgeApi_CallDnsAcme_Handler,
		},
		{
			MethodName: "SendSystemStat",
			Handler:    _BridgeApi_SendSystemStat_Handler,
		},
		{
			MethodName: "SendRouteInfo",
			Handler:    _BridgeApi_SendRouteInfo_Handler,
		},
		{
			MethodName: "SendLog",
			Handler:    _BridgeApi_SendLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTargetStream",
			Handler:       _BridgeApi_GetTargetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge.proto",
}
