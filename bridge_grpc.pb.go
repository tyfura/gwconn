// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bridge.proto

package gwconn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bridge_LoginBridge_FullMethodName     = "/gwconn.Bridge/LoginBridge"
	Bridge_RegisterBridge_FullMethodName  = "/gwconn.Bridge/RegisterBridge"
	Bridge_GetTargetStream_FullMethodName = "/gwconn.Bridge/GetTargetStream"
	Bridge_DnsAcmeChanger_FullMethodName  = "/gwconn.Bridge/DnsAcmeChanger"
	Bridge_SendStat_FullMethodName        = "/gwconn.Bridge/SendStat"
	Bridge_SendLog_FullMethodName         = "/gwconn.Bridge/SendLog"
)

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeClient interface {
	LoginBridge(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	RegisterBridge(ctx context.Context, in *BridgeInfo, opts ...grpc.CallOption) (*RegisterResp, error)
	GetTargetStream(ctx context.Context, in *JoinStreamReq, opts ...grpc.CallOption) (Bridge_GetTargetStreamClient, error)
	DnsAcmeChanger(ctx context.Context, in *DnsChangerReq, opts ...grpc.CallOption) (*GeneralResp, error)
	SendStat(ctx context.Context, in *BridgeStat, opts ...grpc.CallOption) (*GeneralResp, error)
	SendLog(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*GeneralResp, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) LoginBridge(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Bridge_LoginBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RegisterBridge(ctx context.Context, in *BridgeInfo, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Bridge_RegisterBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetTargetStream(ctx context.Context, in *JoinStreamReq, opts ...grpc.CallOption) (Bridge_GetTargetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bridge_ServiceDesc.Streams[0], Bridge_GetTargetStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeGetTargetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_GetTargetStreamClient interface {
	Recv() (*Targets, error)
	grpc.ClientStream
}

type bridgeGetTargetStreamClient struct {
	grpc.ClientStream
}

func (x *bridgeGetTargetStreamClient) Recv() (*Targets, error) {
	m := new(Targets)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) DnsAcmeChanger(ctx context.Context, in *DnsChangerReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, Bridge_DnsAcmeChanger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SendStat(ctx context.Context, in *BridgeStat, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, Bridge_SendStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SendLog(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, Bridge_SendLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
// All implementations must embed UnimplementedBridgeServer
// for forward compatibility
type BridgeServer interface {
	LoginBridge(context.Context, *LoginReq) (*LoginResp, error)
	RegisterBridge(context.Context, *BridgeInfo) (*RegisterResp, error)
	GetTargetStream(*JoinStreamReq, Bridge_GetTargetStreamServer) error
	DnsAcmeChanger(context.Context, *DnsChangerReq) (*GeneralResp, error)
	SendStat(context.Context, *BridgeStat) (*GeneralResp, error)
	SendLog(context.Context, *LogMsg) (*GeneralResp, error)
	mustEmbedUnimplementedBridgeServer()
}

// UnimplementedBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (UnimplementedBridgeServer) LoginBridge(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBridge not implemented")
}
func (UnimplementedBridgeServer) RegisterBridge(context.Context, *BridgeInfo) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBridge not implemented")
}
func (UnimplementedBridgeServer) GetTargetStream(*JoinStreamReq, Bridge_GetTargetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTargetStream not implemented")
}
func (UnimplementedBridgeServer) DnsAcmeChanger(context.Context, *DnsChangerReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DnsAcmeChanger not implemented")
}
func (UnimplementedBridgeServer) SendStat(context.Context, *BridgeStat) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStat not implemented")
}
func (UnimplementedBridgeServer) SendLog(context.Context, *LogMsg) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}
func (UnimplementedBridgeServer) mustEmbedUnimplementedBridgeServer() {}

// UnsafeBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServer will
// result in compilation errors.
type UnsafeBridgeServer interface {
	mustEmbedUnimplementedBridgeServer()
}

func RegisterBridgeServer(s grpc.ServiceRegistrar, srv BridgeServer) {
	s.RegisterService(&Bridge_ServiceDesc, srv)
}

func _Bridge_LoginBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).LoginBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_LoginBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).LoginBridge(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RegisterBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RegisterBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_RegisterBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RegisterBridge(ctx, req.(*BridgeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetTargetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).GetTargetStream(m, &bridgeGetTargetStreamServer{stream})
}

type Bridge_GetTargetStreamServer interface {
	Send(*Targets) error
	grpc.ServerStream
}

type bridgeGetTargetStreamServer struct {
	grpc.ServerStream
}

func (x *bridgeGetTargetStreamServer) Send(m *Targets) error {
	return x.ServerStream.SendMsg(m)
}

func _Bridge_DnsAcmeChanger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnsChangerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).DnsAcmeChanger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_DnsAcmeChanger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).DnsAcmeChanger(ctx, req.(*DnsChangerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SendStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeStat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SendStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_SendStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SendStat(ctx, req.(*BridgeStat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_SendLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SendLog(ctx, req.(*LogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Bridge_ServiceDesc is the grpc.ServiceDesc for Bridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gwconn.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginBridge",
			Handler:    _Bridge_LoginBridge_Handler,
		},
		{
			MethodName: "RegisterBridge",
			Handler:    _Bridge_RegisterBridge_Handler,
		},
		{
			MethodName: "DnsAcmeChanger",
			Handler:    _Bridge_DnsAcmeChanger_Handler,
		},
		{
			MethodName: "SendStat",
			Handler:    _Bridge_SendStat_Handler,
		},
		{
			MethodName: "SendLog",
			Handler:    _Bridge_SendLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTargetStream",
			Handler:       _Bridge_GetTargetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge.proto",
}
