// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: gw.proto

package gwconn

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GwApi_GetNewBridges_FullMethodName = "/gwconn.GwApi/GetNewBridges"
	GwApi_AckBridge_FullMethodName     = "/gwconn.GwApi/AckBridge"
)

// GwApiClient is the client API for GwApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GwApiClient interface {
	GetNewBridges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NewBridgeList, error)
	AckBridge(ctx context.Context, in *AcceptBridge, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gwApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGwApiClient(cc grpc.ClientConnInterface) GwApiClient {
	return &gwApiClient{cc}
}

func (c *gwApiClient) GetNewBridges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NewBridgeList, error) {
	out := new(NewBridgeList)
	err := c.cc.Invoke(ctx, GwApi_GetNewBridges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gwApiClient) AckBridge(ctx context.Context, in *AcceptBridge, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, GwApi_AckBridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GwApiServer is the server API for GwApi service.
// All implementations must embed UnimplementedGwApiServer
// for forward compatibility
type GwApiServer interface {
	GetNewBridges(context.Context, *empty.Empty) (*NewBridgeList, error)
	AckBridge(context.Context, *AcceptBridge) (*empty.Empty, error)
	mustEmbedUnimplementedGwApiServer()
}

// UnimplementedGwApiServer must be embedded to have forward compatible implementations.
type UnimplementedGwApiServer struct {
}

func (UnimplementedGwApiServer) GetNewBridges(context.Context, *empty.Empty) (*NewBridgeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBridges not implemented")
}
func (UnimplementedGwApiServer) AckBridge(context.Context, *AcceptBridge) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckBridge not implemented")
}
func (UnimplementedGwApiServer) mustEmbedUnimplementedGwApiServer() {}

// UnsafeGwApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GwApiServer will
// result in compilation errors.
type UnsafeGwApiServer interface {
	mustEmbedUnimplementedGwApiServer()
}

func RegisterGwApiServer(s grpc.ServiceRegistrar, srv GwApiServer) {
	s.RegisterService(&GwApi_ServiceDesc, srv)
}

func _GwApi_GetNewBridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwApiServer).GetNewBridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GwApi_GetNewBridges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwApiServer).GetNewBridges(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GwApi_AckBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwApiServer).AckBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GwApi_AckBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwApiServer).AckBridge(ctx, req.(*AcceptBridge))
	}
	return interceptor(ctx, in, info, handler)
}

// GwApi_ServiceDesc is the grpc.ServiceDesc for GwApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GwApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gwconn.GwApi",
	HandlerType: (*GwApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewBridges",
			Handler:    _GwApi_GetNewBridges_Handler,
		},
		{
			MethodName: "AckBridge",
			Handler:    _GwApi_AckBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gw.proto",
}
